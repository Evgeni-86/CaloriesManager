
@Repository
public class JdbcUserRepository implements UserRepository {
    private static final Logger LOG = LoggerFactory.getLogger(JdbcUserRepository.class);
    private final JdbcTemplate jdbcTemplate;
    private static final BeanPropertyRowMapper<User> ROW_MAPPER = BeanPropertyRowMapper.newInstance(User.class);

    public JdbcUserRepository(@Autowired @Qualifier("dataSource") DataSource dataSource) {
        this.jdbcTemplate = new JdbcTemplate(dataSource);
    }

    @Override
    public User save(User user) {
        Number insertKey = null;
        int countUpdateRaw = 0;

        MapSqlParameterSource mapSqlParameterSource = new MapSqlParameterSource();
        mapSqlParameterSource
                .addValue("id", user.getId())
                .addValue("name", user.getName())
                .addValue("email", user.getEmail())
                .addValue("password", user.getPassword())
                .addValue("registered", user.getRegistered())
                .addValue("enabled", user.isEnabled())
                .addValue("calories_per_day", user.getCaloriesPerDay());

        if (user.isNew()) {
            SimpleJdbcInsert simpleJdbcInsert = new SimpleJdbcInsert(jdbcTemplate);
            simpleJdbcInsert.setTableName("users");
            simpleJdbcInsert.usingGeneratedKeyColumns("id");
            insertKey = simpleJdbcInsert.executeAndReturnKey(mapSqlParameterSource);
            user.setId(insertKey.intValue());
            LOG.info("save in database {}", user);
        } else {
            NamedParameterJdbcTemplate namedParameterJdbcTemplate = new NamedParameterJdbcTemplate(jdbcTemplate);
            String sql = "UPDATE users SET name=:name, email=:email, password=:password, " +
                    "registered=:registered, enabled=:enabled, calories_per_day=:calories_per_day WHERE id=:id";
            countUpdateRaw = namedParameterJdbcTemplate.update(sql, mapSqlParameterSource);
            LOG.info("update in database {}", user);
        }

        if (insertKey != null || countUpdateRaw > 0) return user;
        else throw new RuntimeException("error write to database");
    }

    @Override
    public boolean delete(int id) {
        String sql = "DELETE FROM users WHERE id = ?";
        int countDeleteRaw = jdbcTemplate.update(sql, id);
        if (countDeleteRaw > 0)
            LOG.info("delete from database user id = {}", id);
        return countDeleteRaw > 0;
    }

//    @Override
//    public User get(int id) {
//        User user;
//        user = jdbcTemplate.queryForObject("SELECT * FROM users WHERE id = ?", ROW_MAPPER, id);
//        if (user != null) {
//            LOG.info("get from database user id = {}", id);
//            return user;
//        } else throw new RuntimeException("error read from database");
//    }

    @Override
    public User get(int id) {
        List<User> user = jdbcTemplate.query("SELECT * FROM users WHERE id = ?", ROW_MAPPER, id);
        if (!user.isEmpty()) {
            LOG.info("get from database user id = {}", id);
            return user.get(0);
        } else
            return null;
    }

    @Override
    public User getByEmail(String email) {
        List<User> user = jdbcTemplate.query("SELECT * FROM users WHERE email = ?", ROW_MAPPER, email);
        if (!user.isEmpty())
            return user.get(0);
        else return null;
    }

//    @Override
//    public User getByEmail(String email) {
//        User user;
//        user = jdbcTemplate.queryForObject("SELECT * FROM users WHERE email = ?", ROW_MAPPER, email);
//        if (user != null)
//            return user;
//        else throw new RuntimeException("error read from database");
//    }

    @Override
    public List<User> getAll() {
        List<User> users = jdbcTemplate.query("SELECT * FROM users", ROW_MAPPER);
        if (!users.isEmpty())
            return users;
        else throw new RuntimeException("error read from database");
    }
}
